{
    "contents" : "---\ntitle: \"Analysis of Dose Response\"\nauthor: \"Ryan Abdella\"\ndate: \"January 15, 2015\"\noutput:\n  html_document:\n    css: ~/Github/Food-Optimization/Scripts/foghorn_edited.css\n---\n\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\nprocessedDataPath <- paste(\"../Data/Processed/\", experimentName, sep = \"\")\n\nsource(\"./wMT_fxns.R\")\nsource(\"./survival_fxns.R\")\nsource(paste(\"./\", experimentName, \".R\", sep = \"\"))\n\npaste(experimentName)\n\n```\n \n## Raw Activity ##\n\n```{r, warning = FALSE, echo = FALSE}\n\n## Pull in all the file associated with the current experiment ##\n## and create a data frame containing the raw data.            ##\n## Regroup data frame so that it's ordered by strain and       ##\n## replicate. Add in strain information.                       ##\n\nfile <- dir(path = paste(\"../Data/Raw/\", experimentName, sep = \"\"), \".txt\", full.names = TRUE)\n\n## Need to change to using dplyr instead of plyr. ##\nexperimentAttributes.df <- processMicrotrackerReport(file[1])\nbinSize <- experimentAttributes.df$binSize[1]\ntime <- experimentAttributes.df$time[1]\nnumGroups <- experimentAttributes.df$numGroups[1]\nnumBins <- experimentAttributes.df$numBins[1]\ntimes <- seq(from = binSize, to = time, by = binSize)\n\nraw.df <- generateDataFrameFromFile(experimentAttributes.df)\n\nsave(raw.df, file = paste(processedDataPath, \"/\", experimentName, \"_Raw.Rda\", sep = \"\"), ascii = TRUE)\n\nordered.df <- raw.df[order(raw.df$col, raw.df$row, raw.df$time), ]\n\nordered.df$strain <- factor(ordered.df$col, labels = strains)\n\nsave(ordered.df, file = paste(processedDataPath, \"/\", experimentName, \"_Processed.Rda\", sep = \"\"), ascii = TRUE)\n\n```\n\n```{r Raw, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(ordered.df) + aes(x = time, y = activity) + geom_line() + facet_grid(row ~ strain) +\n  labs(x = \"Time (minutes)\", y = \"Raw Activity\")\n\n```\n\n## Cleaned Data ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\n## Remove both columns and individual wells that were contaminated. ##\n\ncleaned.df <- ordered.df\ncleaned.df$activity[(cleaned.df$col %in% colRemove)] <- NA\ncleaned.df$activity[(cleaned.df$row %in% rowRemove)] <- NA\nfor(i in 1:length(wellRemove$row)) {\n  cleaned.df$activity[cleaned.df$row == wellRemove$row[i] & cleaned.df$col == wellRemove$col[i]] <- NA\n}\n\nsave(cleaned.df, file = paste(processedDataPath, \"/\", experimentName, \"_Cleaned2.Rda\", sep = \"\"), ascii = TRUE)\n\n```\n\n```{r Cleaned, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(cleaned.df) + aes(x = time, y = activity) + geom_line() + facet_grid(row ~ strain) +\n  labs(x= \"Time (minutes)\", y = \"Raw Activity\")\n\n```\n\n## Well Normalized Data ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\n## Normalize activity data by the maximum activity of each well. ##\n## NEED TO ADD NORMALIZING BY THE NUMBER OF WORMS SORTED.        ##\n\nwell.df <- cleaned.df %>%\n  group_by(strain, row) %>%\n  mutate(norm.act = 100 * activity / max(activity, na.rm = TRUE))\n\nwell.df <- ungroup(well.df)\n\nsave(well.df, file = paste(processedDataPath, \"/\", experimentName, \"_Normalized.Rda\", sep = \"\"), ascii = TRUE)\n\n```\n\n```{r Normalized, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(well.df) + aes(x = time, y = norm.act) + ylim(0, 100) + geom_line() + facet_grid(row ~ strain) +\n  labs(x = \"Time (minutes)\", y = \"Normalized Activity\")\n\n```\n\n## Setting Top of Curve by Well ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\n# THIS IS NOT WORKING #\n\nwell.df <- well.df %>%\n  group_by(strain, row) %>%\n  mutate(max.sum = time[which.max(norm.act)[1]]) %>%\n  group_by(row) %>%\n  mutate(adjusted.activity = ifelse(time < max.sum, 100, norm.act))\nwell.df <- ungroup(well.df)\n  \n```\n\n```{r Adjusted, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(well.df) + aes(x = time, y = adjusted.activity) + geom_line() + facet_grid(row ~ strain) +\n  labs(x = \"Time (minutes)\", y = \"Adjusted Activity\")\n\n```\n\n## Well Curve Fitting ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\nwell_params.df <- data.frame(strain = rep(strains, each = replicates), row = rep(levels(well.df$row), nStrains), bparam = rep(0, nStrains * replicates), cparam = rep(0, nStrains * replicates))\n\nl = 1\n\nfor (x in levels(well.df$strain)) {\n  for (y in levels(well.df$row)) {\n    if (!(is.na(well.df$norm.act[well.df$row == y & well.df$strain == x]))[1] == TRUE) {\n      temp <- nlm(well_twoplog, c(2, 30), well.df, y, x)[[\"estimate\"]]\n      well_params.df$bparam[l] <- temp[1]\n      well_params.df$cparam[l] <- temp[2]\n    }\n    l = l + 1\n  }\n}\n\nsave(well_params.df, file = paste(processedDataPath, \"/\", experimentName, \"_Well_Params.Rda\", sep = \"\"), ascii = TRUE)\n\nprint(well_params.df)\n\n```\n\n## 2 Parameter Logistic Function Fits by Well ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\ndraw_twoplog <- function(bparam, cparam) {\n  return((100 / (1 + ((times / cparam) ^ bparam))))\n}\n\nwell_survivals.df <- data.frame(time = times)\n\nl <- 2\n\nfor (x in levels(well.df$strain)) {\n  for (y in levels(well.df$row)) {\n    well_survivals.df[l] <- draw_twoplog(well_params.df$bparam[well_params.df$strain == x & well_params.df$row == y], well_params.df$cparam[well_params.df$strain == x & well_params.df$row == y])\n    l <- l + 1\n  }\n}\n\nwell_survivals.df <- well_survivals.df %>% gather(strain, yvalue, 2:97)\nwell.df$yvalue <- well_survivals.df$yvalue\n\nfor (i in 1:length(well.df$yvalue)) {\n  if (is.na(well.df$norm.act[i]) == TRUE) {\n    well.df$yvalue[i] <- NA\n  }\n}\n\n```\n\n```{r Well_Fits, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(well.df) + geom_line(aes(x = time, y = norm.act)) + ylim(0, 100) + geom_line(aes(x = time, y = yvalue, color = \"red\")) + facet_grid(conc ~ strain)\n\n```\n\n## Strain Mean Data ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\n## Let's look at the mean and standard deviation of the ##\n## data per strain.                                     ##\n\nstrain.df <- well.df %>%\n  group_by(strain, time) %>%\n  summarise(mean.activity = mean(activity, na.rm = TRUE), \n            sd.activity = sd(activity, na.rm = TRUE), \n            median.activity = median(activity, na.rm = TRUE), \n            total.activity = sum(activity, na.rm = TRUE))\n\nstrain.df <- ungroup(strain.df)\n\nfor (i in 1:length(strain.df$total.activity)) {\n  if (strain.df$total.activity[i] == 0) {\n    strain.df$total.activity[i] <- NA\n  }\n  if (!is.finite(strain.df$mean.activity[i])) {\n    strain.df$mean.activity[i] <- NA\n  }\n  if (!is.finite(strain.df$sd.activity[i])) {\n    strain.df$sd.activity[i] <- NA\n  }\n}\n\n```\n\n```{r Strain_Mean, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(strain.df) + geom_line(aes(x = time, y = mean.activity)) + \n  geom_errorbar(aes(x = time, ymin = mean.activity - sd.activity, ymax = mean.activity + sd.activity)) + \n  facet_wrap( ~ strain) + labs(x = \"Time (minutes)\", y = \"Mean Activity\")\n\n```\n\n## Strain Median Data ##\n\n```{r Strain_Median, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(strain.df) + aes(x = time, y = median.activity) + geom_line() + facet_wrap( ~ strain) +\n  labs(x = \"Time (minutes)\", y = \"Median Activity\")\n\n```\n\n## Strain Total Data ##\n\n```{r Strain_Total, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(strain.df) + aes(x = time, y = total.activity) + geom_line() + facet_wrap( ~ strain) +\n  labs(x = \"Time (minutes)\", y = \"Activity\")\n\n```\n\n## Strain Normalized Data ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\nstrain.df <- strain.df %>%\n  group_by(strain) %>%\n  mutate(norm.act = 100 * total.activity / max(total.activity, na.rm = TRUE))\n\nstrain.df <- ungroup(strain.df)\n\n```\n\n```{r Strain_Normalized, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(strain.df) + aes(x = time, y = norm.act) + ylim(0, 100) + geom_line() + facet_wrap( ~ strain) + \n  labs(x = \"Time (minutes)\", y = \"Normalized Activity\")\n\n```\n\n## Setting Top of Curve by Strain ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\nstrain.df <- strain.df %>%\n  group_by(strain) %>%\n  mutate(max.sum = time[which.max(norm.act)[1]]) #%>%\n  #mutate(adjusted.activity = ifelse(day < max.sum, 100, norm.act))\n\nstrain.df <- ungroup(strain.df)\nstrain.df$adjusted.activity <- rep(0, length(strain.df$time))\n\nfor (i in 1:length(strain.df$strain)) {\n  strain.df$adjusted.activity[i] <- ifelse(strain.df$time[i] < strain.df$max.sum[i], 100, strain.df$norm.act[i])\n}\n\n```\n\n```{r Strain_Adjusted, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\n#ggplot(strain.df) + aes(x = time, y = adjusted.activity) + geom_line() + facet_grid(row ~ strain) +\n#  labs(x = \"Time (minutes)\", y = \"Adjusted Activity\")\n\n```\n\n## Strain Curve Fitting ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\nstrain_params.df <- data.frame(strain = strains, bparam = rep(0, nStrains), cparam = rep(0, nStrains))\n\nl = 1\n\nfor (x in strains) {\n  if(!(is.na(strain.df$norm.act[strain.df$strain == x]))[1] == TRUE) {\n    temp <- nlm(strain_twoplog, c(2, 30), strain.df, x)[[\"estimate\"]]\n    strain_params.df$bparam[l] <- temp[1]\n    strain_params.df$cparam[l] <- temp[2]\n  }\n  l = l + 1\n}\n\nsave(strain_params.df, file = paste(processedDataPath, \"/\", experimentName, \"_Strain_Params.Rda\", sep = \"\"), ascii = TRUE)\n\nprint(strain_params.df)\n\n```\n\n## 2 Parameter Logistic Function Fits by Strain ##\n\n```{r, warning = FALSE, message = FALSE, echo = FALSE}\n\nstrain_survivals.df <- data.frame(time = times)\n\ndraw_twoplog <- function(bparam, cparam) {\n  return((100 / (1 + ((times / cparam) ^ bparam))))\n}\n\nl <- 2\n\nfor (x in strains) {\n    strain_survivals.df[l] <- draw_twoplog(strain_params.df$bparam[strain_params.df$strain == x], strain_params.df$cparam[strain_params.df$strain == x])\n    l <- l + 1\n}\n\nstrain_survivals.df <- strain_survivals.df %>% gather(strain, yvalue, 2:13)\n\nstrain.df$yvalue <- strain_survivals.df$yvalue\n\nfor (i in 1:length(strain.df$yvalue)) {\n  if (is.na(strain.df$norm.act[i]) == TRUE) {\n    strain.df$yvalue[i] <- NA\n  }\n}\n\n```\n\n```{r Strain_Fits, warning = FALSE, message = FALSE, echo = FALSE, fig.path = paste(\"Scripts/\", processedDataPath, \"/\", experimentName, \"_\", sep = \"\"), fig.width = 15, fig.height = 12}\n\nggplot(strain.df) + geom_line(aes(x = time, y = norm.act)) + ylim(0, 100) + geom_line(aes(x = time, y = yvalue, color = \"red\")) + facet_wrap( ~ strain)\n\n```",
    "created" : 1424127833812.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "418718140",
    "id" : "ACA61CE1",
    "lastKnownWriteTime" : 1424124095,
    "path" : "~/GitHub/Dose-Heritability/Scripts/Dose_Heritability_Report.Rmd",
    "project_path" : "Scripts/Dose_Heritability_Report.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}